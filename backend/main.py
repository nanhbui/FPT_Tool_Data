"""
Module ch√≠nh ƒë·ªÉ ch·∫°y Project Report Tool
"""

import os
import sys
from datetime import datetime
from data_processor import DataProcessor
from ai_detector import AIDetector
from calculator import RevenueCalculator
from report_generator import ReportGenerator
import pandas as pd


class ProjectReportTool:
    """Class ch√≠nh ƒëi·ªÅu ph·ªëi to√†n b·ªô quy tr√¨nh"""

    def __init__(self):
        self.data_processor = DataProcessor()
        self.ai_detector = AIDetector()
        self.calculator = RevenueCalculator()
        self.report_generator = ReportGenerator()

    def load_project_code_file(self, file_path):
        """
        ƒê·ªçc file project_code.xlsx ƒë·ªÉ l·∫•y mapping Revenue

        Args:
            file_path: ƒê∆∞·ªùng d·∫´n file project_code.xlsx

        Returns:
            tuple: (DataFrame g·ªëc, dict mapping {Project Code: Ratecard})
        """
        try:
            # ƒê·ªçc file Excel
            if file_path.endswith(".xls"):
                df = pd.read_excel(file_path, engine="xlrd")
            else:
                df = pd.read_excel(file_path, engine="openpyxl")

            # Chu·∫©n h√≥a t√™n c·ªôt
            df.columns = df.columns.str.strip()

            # Ki·ªÉm tra c√°c c·ªôt b·∫Øt bu·ªôc
            if "Project Code" not in df.columns:
                raise Exception("File project_code.xlsx thi·∫øu c·ªôt 'Project Code'")
            if "Ratecard" not in df.columns:
                raise Exception("File project_code.xlsx thi·∫øu c·ªôt 'Ratecard'")

            # T·∫°o mapping dictionary
            revenue_mapping = {}
            for _, row in df.iterrows():
                project_code = str(row["Project Code"]).strip()
                ratecard = row["Ratecard"]

                # X·ª≠ l√Ω gi√° tr·ªã ratecard
                try:
                    ratecard_value = float(ratecard) if pd.notna(ratecard) else 0
                except (ValueError, TypeError):
                    ratecard_value = 0

                revenue_mapping[project_code] = ratecard_value

            print(f"‚úì ƒê√£ load {len(revenue_mapping)} project codes t·ª´ file")

            return df, revenue_mapping

        except Exception as e:
            raise Exception(f"L·ªói ƒë·ªçc file project_code.xlsx: {str(e)}")

    def select_date_range(self, available_months):
        """
        Cho ph√©p user ch·ªçn kho·∫£ng th·ªùi gian ƒë·ªÉ XU·∫§T (filter data)

        Args:
            available_months: Danh s√°ch (year, month) c√≥ s·∫µn

        Returns:
            tuple: ((start_year, start_month), (end_year, end_month)) ho·∫∑c (None, None) n·∫øu xu·∫•t t·∫•t c·∫£
        """
        print("\n" + "=" * 70)
        print("L·ª∞A CH·ªåN KHO·∫¢NG TH·ªúI GIAN")
        print("=" * 70)
        print("\nC√°c th√°ng c√≥ s·∫µn trong d·ªØ li·ªáu:")

        for idx, (year, month) in enumerate(available_months, 1):
            month_name = self.report_generator.get_month_name(month)
            print(f"  {idx}. {month_name} {year}")

        print("\nüí° Nh·∫≠p 'all' ho·∫∑c ƒë·ªÉ tr·ªëng ƒë·ªÉ xu·∫•t T·∫§T C·∫¢ c√°c th√°ng")
        print("   Ho·∫∑c nh·∫≠p s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn kho·∫£ng th·ªùi gian c·ª• th·ªÉ")

        choice = input("\nL·ª±a ch·ªçn: ").strip().lower()

        if choice == "" or choice == "all":
            print("‚úì S·∫Ω xu·∫•t t·∫•t c·∫£ c√°c th√°ng")
            return None, None

        # Ch·ªçn th√°ng b·∫Øt ƒë·∫ßu
        try:
            start_idx = int(choice)
            if not (1 <= start_idx <= len(available_months)):
                print("  ‚úñ S·ªë kh√¥ng h·ª£p l·ªá! S·∫Ω xu·∫•t t·∫•t c·∫£.")
                return None, None
        except ValueError:
            print("  ‚úñ Gi√° tr·ªã kh√¥ng h·ª£p l·ªá! S·∫Ω xu·∫•t t·∫•t c·∫£.")
            return None, None

        # Ch·ªçn th√°ng k·∫øt th√∫c
        while True:
            try:
                end_idx = int(
                    input(
                        f"Ch·ªçn th√°ng K·∫æT TH√öC ({start_idx}-{len(available_months)}): "
                    )
                )
                if start_idx <= end_idx <= len(available_months):
                    break
                print(
                    f"  ‚úñ Vui l√≤ng nh·∫≠p s·ªë t·ª´ {start_idx} ƒë·∫øn {len(available_months)}"
                )
            except ValueError:
                print("  ‚úñ Vui l√≤ng nh·∫≠p s·ªë!")

        start_month = available_months[start_idx - 1]
        end_month = available_months[end_idx - 1]

        month_name_start = self.report_generator.get_month_name(start_month[1])
        month_name_end = self.report_generator.get_month_name(end_month[1])

        print(
            f"\n‚úì ƒê√£ ch·ªçn: {month_name_start} {start_month[0]} ƒë·∫øn {month_name_end} {end_month[0]}"
        )

        return start_month, end_month

    def select_revenue_month(self, available_months):
        """
        Cho ph√©p user ch·ªçn th√°ng ƒë·ªÉ t·∫°o Revenue_By_Account sheet

        Args:
            available_months: Danh s√°ch (year, month) c√≥ s·∫µn

        Returns:
            tuple: (year, month) ho·∫∑c None
        """
        print("\n" + "=" * 70)
        print("CH·ªåN TH√ÅNG CHO B√ÅO C√ÅO REVENUE BY ACCOUNT")
        print("=" * 70)
        print("\nC√°c th√°ng c√≥ s·∫µn:")

        for idx, (year, month) in enumerate(available_months, 1):
            month_name = self.report_generator.get_month_name(month)
            print(f"  {idx}. {month_name} {year}")

        print("\nNh·∫≠p 'skip' ho·∫∑c ƒë·ªÉ tr·ªëng ƒë·ªÉ b·ªè qua sheet n√†y")

        choice = input("\nL·ª±a ch·ªçn th√°ng: ").strip().lower()

        if choice == "" or choice == "skip":
            return None

        try:
            month_idx = int(choice)
            if 1 <= month_idx <= len(available_months):
                selected = available_months[month_idx - 1]
                month_name = self.report_generator.get_month_name(selected[1])
                print(f"\n‚úì ƒê√£ ch·ªçn: {month_name} {selected[0]}")
                return selected
            else:
                print("  ‚úñ S·ªë kh√¥ng h·ª£p l·ªá! B·ªè qua Revenue_By_Account sheet.")
                return None
        except ValueError:
            print("  ‚úñ Gi√° tr·ªã kh√¥ng h·ª£p l·ªá! B·ªè qua Revenue_By_Account sheet.")
            return None

    def run(self, input_file, project_code_file, output_file=None):
        """
        Ch·∫°y to√†n b·ªô quy tr√¨nh t·∫°o b√°o c√°o

        Args:
            input_file: ƒê∆∞·ªùng d·∫´n file Excel ƒë·∫ßu v√†o (data)
            project_code_file: ƒê∆∞·ªùng d·∫´n file project_code.xlsx
            output_file: ƒê∆∞·ªùng d·∫´n file Excel ƒë·∫ßu ra (optional)
        """
        try:
            print("=" * 70)
            print("PROJECT REPORT TOOL")
            print("=" * 70)

            # 1. ƒê·ªçc file project_code.xlsx
            print("\n[1/8] ƒêang ƒë·ªçc file project_code.xlsx...")
            df_project_code, revenue_mapping = self.load_project_code_file(
                project_code_file
            )

            # 2. ƒê·ªçc d·ªØ li·ªáu ƒë·∫ßu v√†o
            print("\n[2/8] ƒêang ƒë·ªçc file ƒë·∫ßu v√†o...")
            df_input = self.data_processor.load_data(input_file)
            print(f"‚úì ƒê√£ ƒë·ªçc {len(df_input)} d√≤ng d·ªØ li·ªáu")

            # 3. L·∫•y danh s√°ch Project Code duy nh·∫•t
            print("\n[3/8] Ph√°t hi·ªán Project Codes...")
            project_codes = self.data_processor.get_unique_project_codes(df_input)
            print(f"‚úì T√¨m th·∫•y {len(project_codes)} project codes:")
            for i, pc in enumerate(project_codes, 1):
                rev = revenue_mapping.get(pc, 0)
                print(f"  {i}. {pc} ‚Üí Revenue: {rev}")

            # Ki·ªÉm tra project codes thi·∫øu
            missing_codes = [pc for pc in project_codes if pc not in revenue_mapping]
            if missing_codes:
                print(
                    "\n‚ö† C·∫£nh b√°o: C√°c project code sau kh√¥ng c√≥ trong file project_code.xlsx:"
                )
                for pc in missing_codes:
                    print(f"  - {pc} (s·∫Ω d√πng revenue = 0)")

            # 4. Th√™m Revenue v√†o DataFrame
            print("\n[4/8] ƒêang √°p d·ª•ng Revenue v√†o d·ªØ li·ªáu...")
            df_input = self.data_processor.add_revenue_to_data(
                df_input, revenue_mapping
            )
            print("‚úì ƒê√£ th√™m Revenue cho t·∫•t c·∫£ d√≤ng d·ªØ li·ªáu")

            # 5. Ph√¢n b·ªï d·ªØ li·ªáu theo th√°ng (ch·ªâ ƒë·ªÉ t√≠nh Summary)
            print("\n[5/8] ƒêang ph√¢n b·ªï d·ªØ li·ªáu theo th√°ng...")
            df_monthly = self.data_processor.allocate_by_month(df_input)
            available_months = self.data_processor.get_available_months(df_monthly)
            print(f"‚úì ƒê√£ ph√¢n b·ªï d·ªØ li·ªáu cho {len(available_months)} th√°ng")

            # 6. ƒê√°nh d·∫•u AI projects
            print("\n[6/8] ƒêang nh·∫≠n di·ªán AI projects...")
            df_input = self.ai_detector.mark_ai_projects(df_input)
            df_monthly = self.ai_detector.mark_ai_projects(df_monthly)
            ai_count_input = len(df_input[df_input["AI Project"] == "AI"])
            ai_count_monthly = len(df_monthly[df_monthly["AI Project"] == "AI"])
            print(f"‚úì Input: {ai_count_input} d√≤ng AI projects")
            print(f"‚úì Monthly: {ai_count_monthly} d√≤ng AI projects")

            # 7. Th√™m MAIL column v√†o input
            print("\n[7/8] Chu·∫©n b·ªã d·ªØ li·ªáu...")
            df_input["MAIL"] = df_input["Username"].apply(lambda x: f"{x}@fpt.com")

            # 8. T√≠nh to√°n cho Summary sheet (t·ª´ df_monthly)
            print("\n[8/8] T√≠nh to√°n metrics cho Summary sheet...")
            df_monthly = self.calculator.add_calculations(df_monthly)

            # Hi·ªÉn th·ªã th·ªëng k√™
            stats = self.calculator.get_summary_statistics(df_monthly)
            print("\nTh·ªëng k√™:")
            print(f"  - T·ªïng records (input): {len(df_input)}")
            print(f"  - T·ªïng records (monthly): {len(df_monthly)}")
            print(f"  - Unique users: {stats['unique_users']}")
            print(f"  - Unique projects: {stats['unique_projects']}")
            print(f"  - Internal: {stats['internal_count']} records")
            print(f"  - X-Jobs: {stats['xjobs_count']} records")
            print(f"  - AI Projects: {stats['ai_projects_count']} records")
            print(f"  - Total Revenue: ${stats['total_revenue']:,.2f}")
            print(f"  - Total AI Revenue: ${stats['total_ai_revenue']:,.2f}")

            # 9. T·∫°o file output
            if output_file is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_file = f"backend/output/report_{timestamp}.xlsx"

            os.makedirs(os.path.dirname(output_file), exist_ok=True)

            # 10. T·∫°o b√°o c√°o 2 sheets
            print("\nT·∫°o b√°o c√°o Excel...")
            self.report_generator.generate_report_two_sheets(
                df_input=df_input,  # 95 records g·ªëc
                df_monthly=df_monthly,  # 472 records allocate
                month_list=available_months,
                output_path=output_file,
                df_project_code=df_project_code,
            )

            print(f"\n‚úì B√°o c√°o ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {output_file}")
            print(f"  - Sheet 1 (Project Report): {len(df_input)} rows")
            print("  - Sheet 2 (Summary): Monthly metrics")

            print("\n" + "=" * 70)
            print("HO√ÄN TH√ÄNH!")
            print("=" * 70)

            return output_file
            print("HO√ÄN TH√ÄNH!")
            print("=" * 70)
            print(
                "\nüí° L∆∞u √Ω: B·∫°n c√≥ th·ªÉ s·ª≠a gi√° tr·ªã Ratecard trong sheet 'Project_Code'"
            )
            print("   v√† c√°c sheet kh√°c s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t theo!")

            return output_file

        except Exception as e:
            print(f"\n‚úñ L·ªñI: {str(e)}")
            import traceback

            traceback.print_exc()
            sys.exit(1)

    def validate_input_file(self, file_path):
        """
        Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa file ƒë·∫ßu v√†o

        Args:
            file_path: ƒê∆∞·ªùng d·∫´n file c·∫ßn ki·ªÉm tra

        Returns:
            bool: True n·∫øu h·ª£p l·ªá
        """
        if not os.path.exists(file_path):
            print(f"‚úñ File kh√¥ng t·ªìn t·∫°i: {file_path}")
            return False

        if not (
            file_path.lower().endswith(".xls") or file_path.lower().endswith(".xlsx")
        ):
            print("‚úñ File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .xls ho·∫∑c .xlsx")
            return False

        # Ki·ªÉm tra c√°c c·ªôt b·∫Øt bu·ªôc
        try:
            if file_path.endswith(".xls"):
                df = pd.read_excel(file_path, nrows=1, engine="xlrd")
            else:
                df = pd.read_excel(file_path, nrows=1, engine="openpyxl")

            required_columns = [
                "Username",
                "Project Code",
                "From Date",
                "To Date",
                "Member Type",
                "Calendar Effort",
                "Skill",
            ]

            missing_columns = []
            for col in required_columns:
                if col not in df.columns:
                    missing_columns.append(col)

            if missing_columns:
                print(f"‚úñ Thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: {', '.join(missing_columns)}")
                return False

            return True

        except Exception as e:
            print(f"‚úñ L·ªói khi ƒë·ªçc file: {str(e)}")
            return False


def main():
    """H√†m main ƒë·ªÉ ch·∫°y t·ª´ command line"""

    if len(sys.argv) < 3:
        print("C√°ch s·ª≠ d·ª•ng:")
        print(
            "  python main.py <input_file.xls> <project_code.xlsx> [output_file.xlsx]"
        )
        print("\nV√≠ d·ª•:")
        print(
            "  python main.py data/input/sample_input.xls data/input/project_code.xlsx"
        )
        print(
            "  python main.py data/input/sample_input.xls data/input/project_code.xlsx backend/output/my_report.xlsx"
        )
        sys.exit(1)

    input_file = sys.argv[1]
    project_code_file = sys.argv[2]
    output_file = sys.argv[3] if len(sys.argv) > 3 else None

    # Kh·ªüi t·∫°o tool
    tool = ProjectReportTool()

    # Validate input files
    if not tool.validate_input_file(input_file):
        sys.exit(1)

    if not os.path.exists(project_code_file):
        print(f"File project_code.xlsx kh√¥ng t·ªìn t·∫°i: {project_code_file}")
        sys.exit(1)

    # Ch·∫°y tool
    tool.run(input_file, project_code_file, output_file)


if __name__ == "__main__":
    main()
